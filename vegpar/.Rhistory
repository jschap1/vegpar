geotiff.dir
subset_vegpar(geotiff.dir, "FCAN", classname, clipped.gtiff.dir, ucrb_mask)
wdy >= raster("/home/jschap/Documents/ESSD/data/ucrb_vegpars/bv2019/FCAN_April_woody_savanna.tif")
wdy <- raster("/home/jschap/Documents/ESSD/data/ucrb_vegpars/bv2019/FCAN_April_woody_savanna.tif")
wdy
plot(wdy)
netcdf2raster(vegpar_name, "fcanopy", classname, geotiff.dir)
subset_vegpar(geotiff.dir, "fcanopy", classname, clipped.gtiff.dir, ucrb_mask)
ww<-raster("/home/jschap/Documents/ESSD/data/ucrb_vegpars/bv2019/fcanopy_December_grassland.tif")
ww
plot(ww)
vegpar_name
indir=geotiff.dir
varname="fcanopy"
classname
outdir <- clipped.gtiff.dir
basin_mask =ucrb_mask
nclasses <- length(classname)
t=1
cc=1
nclasses
nt
nt=21
nt=12
name2load <- file.path(indir,
paste0(varname, "_", month.name[t], "_", classname[cc], ".tif"))
name2load
r <- raster(name2load)
# Crude, ideally replace with a better implementation
vegpars <- ncdf4::nc_open(vegpar_name)
lon <- ncdf4::ncvar_get(vegpars, varid = "lon")
lat <- ncdf4::ncvar_get(vegpars, varid = "lat")
extent(r) <- extent(range(lon)[1], range(lon)[2], range(lat)[1], range(lat)[2])
r
r.pr <- projectRaster(r, basin_mask)
r.clip <- overlay(r.pr, basin_mask, fun= function(x,y){x*y})
name2save <- file.path(outdir,
paste0(tools::file_path_sans_ext(basename(name2load)), "_clipped.tif"))
name2save
writeRaster(r.clip, filename = name2save, overwrite = TRUE)
{
if (nclasses == 17)
{
print("IGBP")
if (nt > 1)
{
name2load <- file.path(indir,
paste0(varname, "_", month.name[t], "_", classname[cc], ".tif"))
} else
{
name2load <- file.path(indir,
paste0(varname, "_", classname[cc], ".tif"))
}
r <- raster(name2load)
# Crude, ideally replace with a better implementation
vegpars <- ncdf4::nc_open(vegpar_name)
lon <- ncdf4::ncvar_get(vegpars, varid = "lon")
lat <- ncdf4::ncvar_get(vegpars, varid = "lat")
extent(r) <- extent(range(lon)[1], range(lon)[2], range(lat)[1], range(lat)[2])
} else
{
print("UMD-NLDAS")
if (nt > 1)
{
name2load <- file.path(indir, paste0(classname[cc], "_", varname, t, ".tif"))
} else
{
name2load <- file.path(indir, paste0(classname[cc], "_", varname, ".tif"))
}
r <- raster(name2load)
}
r.pr <- projectRaster(r, basin_mask)
r.clip <- overlay(r.pr, basin_mask, fun= function(x,y){x*y})
name2save <- file.path(outdir,
paste0(tools::file_path_sans_ext(basename(name2load)), "_clipped.tif"))
writeRaster(r.clip, filename = name2save, overwrite = TRUE)
}
{
for (cc in 1:nclasses)
{
if (nclasses == 17)
{
print("IGBP")
if (nt > 1)
{
name2load <- file.path(indir,
paste0(varname, "_", month.name[t], "_", classname[cc], ".tif"))
} else
{
name2load <- file.path(indir,
paste0(varname, "_", classname[cc], ".tif"))
}
r <- raster(name2load)
# Crude, ideally replace with a better implementation
vegpars <- ncdf4::nc_open(vegpar_name)
lon <- ncdf4::ncvar_get(vegpars, varid = "lon")
lat <- ncdf4::ncvar_get(vegpars, varid = "lat")
extent(r) <- extent(range(lon)[1], range(lon)[2], range(lat)[1], range(lat)[2])
} else
{
print("UMD-NLDAS")
if (nt > 1)
{
name2load <- file.path(indir, paste0(classname[cc], "_", varname, t, ".tif"))
} else
{
name2load <- file.path(indir, paste0(classname[cc], "_", varname, ".tif"))
}
r <- raster(name2load)
}
r.pr <- projectRaster(r, basin_mask)
r.clip <- overlay(r.pr, basin_mask, fun= function(x,y){x*y})
name2save <- file.path(outdir,
paste0(tools::file_path_sans_ext(basename(name2load)), "_clipped.tif"))
writeRaster(r.clip, filename = name2save, overwrite = TRUE)
}
}
print(paste("Saved clipped vegetation parameters to", outdir))
subset_vegpar(geotiff.dir, "fcanopy", classname, clipped.gtiff.dir, ucrb_mask)
nclasses <- length(classname)
for (t in 1:nt)
{
for (cc in 1:nclasses)
{
if (nclasses == 17)
{
print("IGBP")
if (nt > 1)
{
name2load <- file.path(indir,
paste0(varname, "_", month.name[t], "_", classname[cc], ".tif"))
} else
{
name2load <- file.path(indir,
paste0(varname, "_", classname[cc], ".tif"))
}
r <- raster(name2load)
# Crude, ideally replace with a better implementation
vegpars <- ncdf4::nc_open(vegpar_name)
lon <- ncdf4::ncvar_get(vegpars, varid = "lon")
lat <- ncdf4::ncvar_get(vegpars, varid = "lat")
extent(r) <- extent(range(lon)[1], range(lon)[2], range(lat)[1], range(lat)[2])
} else
{
print("UMD-NLDAS")
if (nt > 1)
{
name2load <- file.path(indir, paste0(classname[cc], "_", varname, t, ".tif"))
} else
{
name2load <- file.path(indir, paste0(classname[cc], "_", varname, ".tif"))
}
r <- raster(name2load)
}
r.pr <- projectRaster(r, basin_mask)
r.clip <- overlay(r.pr, basin_mask, fun= function(x,y){x*y})
name2save <- file.path(outdir,
paste0(tools::file_path_sans_ext(basename(name2load)), "_clipped.tif"))
writeRaster(r.clip, filename = name2save, overwrite = TRUE)
}
}
print(paste("Saved clipped vegetation parameters to", outdir))
subset_vegpar(vegpar_name, geotiff.dir, "Cv", classname, clipped.gtiff.dir, ucrb_mask, nt = 1)
cropnat <- raster("/home/jschap/Documents/ESSD/data/ucrb_vegpars/bv2019/clipped_to_ucrb/Cv_crop_natural_mosaic_clipped.tif")
cropnat
plot(cropnat)
library(roxygen2)
library(devtools)
setwd("/home/jschap/Documents/Codes/vegpar/")
build("vegpar")
document("vegpar")
install("vegpar")
?subset_vegpar
setwd("~/Documents/ESSD/codes/Vegetation_Fractions")
list.files()
lcdir <- "./Resampled_1_16"
lcnames <- list.files(lcdir, pattern = glob2rx("*.tif"), full.names = TRUE)
lc.stack <- stack(lcnames)
lcnames
lcdir <- "/Documents/ESSD/codes/Vegetation_Fractions/Resampled_1_16"
lcnames <- list.files(lcdir, pattern = glob2rx("*.tif"), full.names = TRUE)
lc.stack <- stack(lcnames)
lcnames
lcdir <- "/Documents/ESSD/codes/Vegetation_Fractions/Resampled_1_16/"
lcnames <- list.files(lcdir, pattern = glob2rx("*.tif"), full.names = TRUE)
lcdir <- "~/Documents/ESSD/codes/Vegetation_Fractions/Resampled_1_16/"
lcnames <- list.files(lcdir, pattern = glob2rx("*.tif"), full.names = TRUE)
lc.stack <- stack(lcnames)
library(raster)
lc.stack <- stack(lcnames)
lc.stack
vegpar
library(vegpar)
subset_vegpar
LAI <- raster("monthly_average_LAI_2017.grd")
LAI
LAI <- brick("monthly_average_LAI_2017.grd")
LAI
plot(LAI[[1]])
ucrb <- raster("/home/jschap/Documents/ESSD/data/colo_mask.tif")
lc.ucrb <- crop(lc.stack, ucrb)
lc.ucrb
plot(lc.ucrb[[1]])
lc.clip <- overlay(lc.ucrb, ucrb, fun = function(x,y){x*y})
plot(lc.clip[[1]])
plot(lc.clip[[4]])
plot(lc.clip[[5]])
plot(lc.clip[[5]])9
plot(lc.clip[[9]])
myclip <- function(r, m)
{
y <- crop(r, m)
z <- overlay(y, m, fun = function(x,y){x*y})
}
lc.clip <- myclip(lc.ucrb, ucrb)
albedo.clip <- myclip(albedo, ucrb)
albedo <- brick("monthly_average_albedo_2017.grd")
fcan <- brick("monthly_average_fcan.grd")
albedo <- brick("monthly_average_albedo_2017.grd")
albedo.clip <- myclip(albedo, ucrb)
#' Majority raster
#'
#' Makes a raster mask with values of 1 where the input
#' raster is higher than some threshold
majority_raster <- function(x, thres = 90)
{
ind <- which(values(x) > thres)
majority.rast <- x
values(majority.rast) <- 0
values(majority.rast)[ind] <- 1
return(majority.rast)
}
Barren <- majority_raster(lc.stack$Barren_fraction)
plot(Barren)
Barren <- majority_raster(lc.clip$Barren_fraction)
lc.clip
names(lc.clip) <- names(lc.stack)
albedo
names(albedo.clip) <- names(albedo)
Barren <- majority_raster(lc.clip$Barren_fraction)
plot(Barren)
#' Majority raster
#'
#' Makes a raster mask with values of 1 where the input
#' raster is higher than some threshold
majority_raster <- function(x, thres = 50)
{
ind <- which(values(x) > thres)
majority.rast <- x
values(majority.rast) <- 0
values(majority.rast)[ind] <- 1
return(majority.rast)
}
Barren <- majority_raster(lc.clip$Barren_fraction)
plot(Barren)
#' Majority raster
#'
#' Makes a raster mask with values of 1 where the input
#' raster is higher than some threshold
majority_raster <- function(x, thres = 5)
{
ind <- which(values(x) > thres)
majority.rast <- x
values(majority.rast) <- 0
values(majority.rast)[ind] <- 1
return(majority.rast)
}
Barren <- majority_raster(lc.clip$Barren_fraction)
plot(Barren)
#' Majority raster
#'
#' Makes a raster mask with values of 1 where the input
#' raster is higher than some threshold
majority_raster <- function(x, thres = 90)
{
ind <- which(values(x) > thres)
majority.rast <- x
values(majority.rast) <- 0
values(majority.rast)[ind] <- 1
return(majority.rast)
}
Barren <- majority_raster(lc.clip$Barren_fraction)
plot(Barren)
Cropland_Natural_Vegetation_Mosaics <- majority_raster(lc.clip$Cropland_Natural_Vegetation_Mosaics_fraction)
Deciduous_Broadleaf <- majority_raster(lc.clip$Deciduous_Broadleaf_fraction)
Evergreen_Broadleaf <- majority_raster(lc.clip$Evergreen_Broadleaf_fraction)
Grasslands <- majority_raster(lc.clip$Grasslands_fraction)
Open_Shrublands <- majority_raster(lc.clip$Open_Shrublands_fraction)
Savannas <- majority_raster(lc.clip$Savannas_fraction)
Urban_and_Built_Up_Lands <- majority_raster(lc.clip$Urban_and_Built_Up_Lands_fraction)
Woody_Savannas <- majority_raster(lc.clip$Woody_Savannas_fraction)
Closed_Shrublands <- majority_raster(lc.clip$Closed_Shrublands_fraction)
Croplands <- majority_raster(lc.clip$Croplands_fraction)
Deciduous_Needleleaf <- majority_raster(lc.clip$Deciduous_Needleleaf_fraction)
Evergreen_Needleleaf <- majority_raster(lc.clip$Evergreen_Needleleaf_fraction)
Mixed_Forests <- majority_raster(lc.clip$Mixed_Forests_fraction)
Permanent_Wetlands <- majority_raster(lc.clip$Permanent_Wetlands_fraction)
Snow_and_Ice <- majority_raster(lc.clip$Snow_and_Ice_fraction)
Water_Bodies <- majority_raster(lc.clip$Water_Bodies_fraction)
plot(Grasslands)
plot(lc.clip[[9]])
plot(Grasslands)
plot(lc.clip[[9]])
plot(Grasslands)
plot(lc.clip[[9]])
lc.maj <- majority_raster(lc.clip)
lc.maj
plot(lc.maj[[1]])
plot(lc.maj[[9]])
plot(Grasslands)
plot(lc.maj$Grasslands)
plot(lc.maj$Grasslands_fraction)
LAI.clip <- myclip(LAI, ucrb)
names(LAI.clip) <- names(LAI)
LAI.clip
LAI
plot(LAI.clip[[1]])
plot(LAI.clip[[7]])
lc.LAI <- overlay(lc.maj, LAI.clip, fun = function(x, y) {return(x*y)}, progress = "text")
lc.LAI
LAI.clip
lc.LAI <- vector(length = 12, "list")
lc.LAI <- vector(length = 12, "list")
for (m in 1:12)
{
lc.LAI[[m]] <- overlay(lc.maj, LAI.clip[[m]], fun = function(x, y) {return(x*y)}, progress = "text")
names(lc.LAI[[m]]) <- names(lc.maj)
}
lc.LAI
names(lc.LAI) <- month.name[1:12]
plot(lc.LAI$January)
plot(lc.LAI$July)
plot(lc.maj)
plot(lc.clip)
plot(lc.clip)
plot(lc.maj)
plot(lc.LAI$January)
plot(lc.LAI$July)
source('~/Documents/ESSD/codes/ucrb_veglib_params.R', echo=TRUE)
lcnames
names(lc.maj)
strsplit(names(lc.maj), "_fraction")
lcs <- vector(length= 17)
for (k in 1:17)
{
lcs[k] <- strsplit(names(lc.maj), "_fraction")
}
names(lc.maj[[k]])
names(lc.maj[[7]])
lcs <- vector(length= 17)
for (k in 1:17)
{
lcs[k] <- strsplit(names(lc.maj[[k]]), "_fraction")[[1]]
}
lcs
LAI_tab <- get_basin_avg(lc.LAI)
LAI_tab
lc.LAI
LAI_tab <- get_basin_avg(lc.LAI$January)
LAI_tab
# Make chart of LCs and their corresponding parameters
values(lc.LAI$January)
# Make chart of LCs and their corresponding parameters
unique(values(lc.LAI$January))
# Make chart of LCs and their corresponding parameters
unique(values(lc.LAI$January$Barren_fraction))
# Make chart of LCs and their corresponding parameters
unique(values(lc.LAI$January$Grasslands_fraction))
# Make chart of LCs and their corresponding parameters
unique(values(lc.LAI$July$Grasslands_fraction))
# Make chart of LCs and their corresponding parameters
unique(values(lc.LAI$July$Savannas_fraction))
# Make chart of LCs and their corresponding parameters
values(lc.LAI$January)
# Make chart of LCs and their corresponding parameters
dat <- values(lc.LAI$January$Barren_fraction)
summary(dat)
zind <- which(dat==0)
dat[zind] <- NA
summary(dat)
mean(dat, na.rm = TRUE)
# Make chart of LCs and their corresponding parameters
LAI_tab <- array(dim = c(17, 12))
for (m in 1:12)
{
for (k in 1:17)
{
dat <- values(lc.LAI[[m]][[k]])
zind <- which(dat==0)
dat[zind] <- NA
LAI[k,m] <- mean(dat, na.rm = TRUE)
}
}
# Make chart of LCs and their corresponding parameters
LAI_tab <- array(dim = c(17, 12))
for (m in 1:12)
{
for (k in 1:17)
{
dat <- values(lc.LAI[[m]][[k]])
zind <- which(dat==0)
dat[zind] <- NA
LAI_tab[k,m] <- mean(dat, na.rm = TRUE)
}
}
LAI_tab
data.frame(lc = lcs, LAI1 = LAI_tab[,1])
dat <- data.frame(lc = lcs, LAI1 = LAI_tab[,1])
head(dat)
dat <- cbind(dat, LAI_tab[,2:12])
head(dat)
names(dat) <- c("LC","LAI1","LAI2","LAI3","LAI4","LAI5",
"LAI6","LAI7","LAI8","LAI9","LAI10","LAI11","LAI12")
head(dat)
dat/10
dat <- dat/10
dat
dat <- data.frame(lc = lcs, LAI1 = LAI_tab[,1])
dat <- cbind(dat, LAI_tab[,2:12])
names(dat) <- c("LC","LAI1","LAI2","LAI3","LAI4","LAI5",
"LAI6","LAI7","LAI8","LAI9","LAI10","LAI11","LAI12")
dat
dat[1,]
dat[2,]
dat[3,]
dat[4,]
dat[5,]
dat[6,]
dat[7,]
dat[8,]
dat[9,]
dat[10,]
dat[11,]
dat[12,]
dat[13,]
dat[14,]
dat[15,]
dat[16,]
dat[17,]
hist(values(lc.LAI$September$Grasslands_fraction))
hist(values(lc.LAI$September$Grasslands_fraction/10))
hist(values(lc.LAI$September$Grasslands_fraction/10), xlim = c(0,7))
hist(values(lc.LAI$September$Savannas_fraction/10), xlim = c(0,7))
hist(values(lc.LAI$September$Open_Shrublands_fraction/10), xlim = c(0,7))
hist(values(lc.LAI$September$Open_Shrublands_fraction/10)
)
#' Majority raster
#'
#' Makes a raster mask with values of 1 where the input
#' raster is higher than some threshold
majority_raster <- function(x, thres = 95)
{
ind <- which(values(x) > thres)
majority.rast <- x
values(majority.rast) <- 0
values(majority.rast)[ind] <- 1
return(majority.rast)
}
lc.maj <- majority_raster(lc.clip)
plot(lc.maj$Grasslands_fraction)
plot(lc.maj)
lc.LAI <- vector(length = 12, "list")
for (m in 1:12)
{
lc.LAI[[m]] <- overlay(lc.maj, LAI.clip[[m]], fun = function(x, y) {return(x*y)}, progress = "text")
names(lc.LAI[[m]]) <- names(lc.maj)
}
names(lc.LAI) <- month.name[1:12]
plot(lc.LAI$January)
plot(lc.LAI$July)
# Get lc names...
lcs <- vector(length= 17)
for (k in 1:17)
{
lcs[k] <- strsplit(names(lc.maj[[k]]), "_fraction")[[1]]
}
# Make chart of LCs and their corresponding parameters
LAI_tab <- array(dim = c(17, 12))
for (m in 1:12)
{
for (k in 1:17)
{
dat <- values(lc.LAI[[m]][[k]])
zind <- which(dat==0)
dat[zind] <- NA
LAI_tab[k,m] <- mean(dat, na.rm = TRUE)
}
}
dat <- data.frame(lc = lcs, LAI1 = LAI_tab[,1])
dat <- cbind(dat, LAI_tab[,2:12])
names(dat) <- c("LC","LAI1","LAI2","LAI3","LAI4","LAI5",
"LAI6","LAI7","LAI8","LAI9","LAI10","LAI11","LAI12")
head(dat)
dat
dat[1,]
which(!is.na(dat[,1]))
which(!is.na(dat[,2]))
dat[,]
dat[,9]
names(dat) <- c("LC","LAI1","LAI2","LAI3","LAI4","LAI5",
"LAI6","LAI7","LAI8","LAI9","LAI10","LAI11","LAI12")
dat[,9]
dat <- data.frame(lc = lcs, LAI1 = LAI_tab[,1])
lcs
dat
dat <- cbind(dat, LAI_tab[,2:12])
names(dat) <- c("LC","LAI1","LAI2","LAI3","LAI4","LAI5",
"LAI6","LAI7","LAI8","LAI9","LAI10","LAI11","LAI12")
head(dat)
dat[,9]
dat[9,]
which(!is.na(dat[,2]))
